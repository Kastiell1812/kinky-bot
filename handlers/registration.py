from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, ContentType, InlineKeyboardMarkup, InlineKeyboardButton
from db.database import add_user_with_photo
from config import ADMIN_CHAT_ID
from loader import bot

class Registration(StatesGroup):
    waiting_for_name = State()
    waiting_for_age = State()
    waiting_for_preferences = State()
    waiting_for_photo = State()
    waiting_for_phone = State()
    waiting_for_video = State()

async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –î–∞–≤–∞–π —Å—Ç–≤–æ—Ä–∏–º–æ —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É. –Ø–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏?")
    await Registration.waiting_for_name.set()

async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–°–∫—ñ–ª—å–∫–∏ —Ç–æ–±—ñ —Ä–æ–∫—ñ–≤?")
    await Registration.waiting_for_age.set()

async def process_age(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ —Å–≤—ñ–π –≤—ñ–∫ —Ü–∏—Ñ—Ä–∞–º–∏.")
        return
    await state.update_data(age=int(message.text))
    await message.answer("–û–ø–∏—à–∏ —Å–≤–æ—ó –≤–ø–æ–¥–æ–±–∞–Ω–Ω—è (—Ö–µ—à—Ç–µ–≥–∏, —Ñ–µ—Ç–∏—à—ñ —Ç–æ—â–æ).")
    await Registration.waiting_for_preferences.set()

async def process_preferences(message: types.Message, state: FSMContext):
    await state.update_data(preferences=message.text)
    await message.answer("–ù–∞–¥—ñ—à–ª–∏ —Å–≤–æ—î —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ—ñ–ª—é.")
    await Registration.waiting_for_photo.set()

async def process_photo(message: types.Message, state: FSMContext):
    if not message.photo:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é.")
        return
    photo_id = message.photo[-1].file_id
    await state.update_data(photo_id=photo_id)

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    keyboard.add(KeyboardButton("üìû –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –º—ñ–π –Ω–æ–º–µ—Ä", request_contact=True))
    keyboard.add("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏")

    await message.answer("–ù–∞–¥—ñ—à–ª–∏ —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∞–±–æ –ø—Ä–æ–ø—É—Å—Ç–∏ —Ü–µ–π –∫—Ä–æ–∫.", reply_markup=keyboard)
    await Registration.waiting_for_phone.set()

async def process_phone(message: types.Message, state: FSMContext):
    if message.contact:
        phone = message.contact.phone_number
    elif message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏":
        phone = None
    else:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É, —â–æ–± –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–º–µ—Ä, –∞–±–æ –ø—Ä–æ–ø—É—Å—Ç–∏.")
        return

    await state.update_data(phone=phone)
    await message.answer("–¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª–∏ –≤—ñ–¥–µ–æ –¥–ª—è –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó (–º–æ–∂–Ω–∞ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏).", reply_markup=ReplyKeyboardRemove())
    await Registration.waiting_for_video.set()

async def process_video(message: types.Message, state: FSMContext):
    if message.content_type in [ContentType.VIDEO, ContentType.VIDEO_NOTE]:
        video_id = message.video.file_id if message.content_type == ContentType.VIDEO else message.video_note.file_id
        await state.update_data(video_id=video_id)
    else:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª–∏ –≤—ñ–¥–µ–æ –∞–±–æ –ø—Ä–æ–ø—É—Å—Ç–∏ –∫–æ–º–∞–Ω–¥–æ—é /skipvideo.")
        return

    await save_and_send_to_admin(message, state)

async def skip_video(message: types.Message, state: FSMContext):
    await save_and_send_to_admin(message, state)

async def save_and_send_to_admin(message: types.Message, state: FSMContext):
    data = await state.get_data()
    await add_user_with_photo(
        user_id=message.from_user.id,
        name=data['name'],
        age=data['age'],
        preferences=data['preferences'],
        photo_id=data['photo_id'],
        phone=data.get('phone')
    )

    username = message.from_user.username or "(–Ω–µ–º–∞—î username)"
    caption = (
        f"–ù–æ–≤–∞ –∞–Ω–∫–µ—Ç–∞ –¥–ª—è –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó:\n"
        f"–Ü–º'—è: {data['name']}\n"
        f"–í—ñ–∫: {data['age']}\n"
        f"–í–ø–æ–¥–æ–±–∞–Ω–Ω—è: {data['preferences']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone', '–ù–µ –Ω–∞–¥–∞–Ω–æ')}\n"
        f"Username: @{username}"
    )

    keyboard = InlineKeyboardMarkup(row_width=3)
    keyboard.add(
        InlineKeyboardButton("‚úÖ –í–µ—Ä–∏—Ñ—ñ–∫—É–≤–∞—Ç–∏", callback_data=f"verify:{message.from_user.id}"),
        InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject:{message.from_user.id}"),
        InlineKeyboardButton("üîÑ –ó–∞–ø–∏—Ç–∞—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–µ –≤—ñ–¥–µ–æ", callback_data=f"repeat_video:{message.from_user.id}")
    )

    await bot.send_photo(chat_id=ADMIN_CHAT_ID, photo=data['photo_id'], caption=caption, reply_markup=keyboard)
    if 'video_id' in data:
        await bot.send_video(chat_id=ADMIN_CHAT_ID, video=data['video_id'], caption=f"–í—ñ–¥–µ–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {data['name']}")

    await message.answer("–ê–Ω–∫–µ—Ç–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –∞–¥–º—ñ–Ω—É. –û—á—ñ–∫—É–π –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.")
    await state.finish()

def register_handlers_registration(dp: Dispatcher):
    dp.register_message_handler(cmd_start, commands=["start"], state="*")
    dp.register_message_handler(process_name, state=Registration.waiting_for_name)
    dp.register_message_handler(process_age, state=Registration.waiting_for_age)
    dp.register_message_handler(process_preferences, state=Registration.waiting_for_preferences)
    dp.register_message_handler(process_photo, content_types=types.ContentType.PHOTO, state=Registration.waiting_for_photo)
    dp.register_message_handler(process_phone, content_types=[types.ContentType.CONTACT, types.ContentType.TEXT], state=Registration.waiting_for_phone)
    dp.register_message_handler(process_video, content_types=[ContentType.VIDEO, ContentType.VIDEO_NOTE], state=Registration.waiting_for_video)
    dp.register_message_handler(skip_video, commands=["skipvideo"], state=Registration.waiting_for_video)
